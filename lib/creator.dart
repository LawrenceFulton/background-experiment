import 'dart:convert';

class Creator {
  final String creatorID;
  final String name;
  final String profilePicture;
  final String titlePicture;
  final String description;
  final bool private;
  final String password;
  final bool isVisible;

  const Creator({
    required this.creatorID,
    required this.name,
    required this.profilePicture,
    required this.titlePicture,
    required this.description,
    required this.private,
    required this.password,
    required this.isVisible,
  });

  const Creator.empty()
      : creatorID = '',
        name = '',
        profilePicture =
            '',
        titlePicture = '',
        description = '',
        private = false,
        password = '',
        isVisible = true;

  factory Creator.fromJson(Map<String, dynamic> json) {
    return Creator(
      creatorID: json['creatorID'] as String,
      name: json['name'] as String,
      profilePicture: json['profilePicture'] as String,
      titlePicture: json['titlePicture'] as String,
      description: (json['description'] as String).replaceAll("\\n", "\n"),
      private: json['private'] ?? false,
      password: json['password'] ?? '',
      isVisible: json['isVisible'] ?? true,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'creatorID': creatorID,
      'name': name,
      'profilePicture': profilePicture,
      'titlePicture': titlePicture,
      'description': description,
      'private': private,
      'password': password,
      'isVisible': isVisible,
    };
  }

  static String encode(List<Creator> questions) => json.encode(
        questions.map<Map<String, dynamic>>((question) => question.toJson()).toList(),
      );

  static List<Creator> decode(String questions) => (json.decode(questions) as List<dynamic>)
      .map<Creator>((item) => Creator.fromJson(item as Map<String, dynamic>))
      .toList();
}
